CREATE DATABASE TravelBookingSystem;
use TravelBookingSystem;
CREATE TABLE CUSTOMERS (
    customer_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone VARCHAR(20),
    country VARCHAR(50),
    registration_date DATETIME DEFAULT CURRENT_TIMESTAMP
);
select * from customers;
INSERT INTO CUSTOMERS (name, email, phone, country)
VALUES
('Anusha Reddy', 'anusha.reddy@example.com', '9876543215', 'India'),
('Venkatesh', 'venkatesh@example.com', '9876543216', 'India'),
('Bhavani Devi', 'bhavani.devi@example.com', '9876543217', 'India'),
('Prasad Rao', 'prasad.rao@example.com', '9876543218', 'India'),
('Sravani', 'sravani@example.com', '9876543219', 'India');

CREATE TABLE DESTINATIONS (
    dest_id INT PRIMARY KEY,
    city VARCHAR(100) NOT NULL,
    country VARCHAR(100) NOT NULL,
    category VARCHAR(50),
    avg_temperature DECIMAL(5,2),
    best_season VARCHAR(50)
);
INSERT INTO DESTINATIONS (dest_id, city, country, category, avg_temperature, best_season) VALUES

(1, 'Kerala', 'India', 'Backwaters', 29.00, 'October to March'),
(2, 'Varanasi', 'India', 'Religious', 32.00, 'October to March'),
(3, 'Puducherry', 'India', 'Beach', 29.50, 'October to March'),
(4, 'Rishikesh', 'India', 'Adventure', 25.00, 'September to November'),
(5, 'Leh', 'India', 'Mountain', 10.00, 'June to September');

CREATE TABLE BOOKINGS (
    booking_id INT PRIMARY KEY,
    customer_id INT NOT NULL,
    dest_id INT NOT NULL,
    booking_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    travel_date DATE NOT NULL,
    return_date DATE,
    status VARCHAR(20) DEFAULT 'Confirmed', -- Confirmed, Cancelled, etc.
    total_amount DECIMAL(10,2),

    FOREIGN KEY (customer_id) REFERENCES CUSTOMERS(customer_id),
    FOREIGN KEY (dest_id) REFERENCES DESTINATIONS(dest_id)
);

INSERT INTO BOOKINGS (booking_id, customer_id, dest_id, booking_date, travel_date, return_date, status, total_amount)
VALUES
(1, 1, 3, '2024-06-01', '2024-07-15', '2024-07-20', 'Confirmed', 15000.00),
(2, 1, 5, '2024-06-10', '2024-08-05', '2024-08-12', 'Confirmed', 18000.00),
(3, 2, 2, '2024-06-05', '2024-07-01', '2024-07-06', 'Cancelled', 17000.00),
(4, 3, 1, '2024-06-07', '2024-11-10', '2024-11-17', 'Confirmed', 22000.00),
(5, 4, 4, '2024-06-12', '2024-09-10', '2024-09-15', 'Confirmed', 19500.00),


select * from bookings;

 
CREATE TABLE PAYMENTS (
    payment_id INT PRIMARY KEY,
    booking_id INT NOT NULL,
    payment_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    amount DECIMAL(10,2) NOT NULL,
    payment_method VARCHAR(50),
    status VARCHAR(20) DEFAULT 'Success',

    FOREIGN KEY (booking_id) REFERENCES BOOKINGS(booking_id)
);
INSERT INTO PAYMENTS (payment_id, booking_id, payment_date, amount, payment_method, status)
VALUES

(1, 1, '2024-06-20', 16000.00, 'Wallet', 'Success'),
(2, 2, '2024-06-25', 14000.00, 'UPI', 'Success'),
(3, 3, '2024-06-28', 0.00, 'Credit Card', 'Failed'),
(4, 4, '2024-07-02', 15500.00, 'Net Banking', 'Success'),
(5, 5, '2024-07-05', 21000.00, 'UPI', 'Success');

CREATE TABLE HOTELS (
    hotel_id INT PRIMARY KEY,
    dest_id INT NOT NULL,
    hotel_name VARCHAR(100) NOT NULL,
    rating DECIMAL(3,2),
    price_per_night DECIMAL(10,2),
    amenities TEXT,

    FOREIGN KEY (dest_id) REFERENCES DESTINATIONS(dest_id)
);
INSERT INTO HOTELS (hotel_id, dest_id, hotel_name, rating, price_per_night, amenities)
VALUES
(1, 1, 'Goa Beach Resort', 4.50, 5500.00, 'Free WiFi, Swimming Pool, Beach Access, Spa'),
(2, 1, 'Sea View Goa Hotel', 4.20, 4800.00, 'Breakfast Included, Parking, Beach View'),
(3, 2, 'Himalayan Heights Manali', 4.70, 6200.00, 'Heated Rooms, Mountain View, Bonfire Area'),
(4, 2, 'Snow Valley Manali', 4.30, 4500.00, 'Free Parking, Restaurant, Tour Desk'),
(5, 3, 'Jaipur Palace Hotel', 4.00, 4000.00, 'Heritage Property, Free WiFi, Rooftop Dining'),

select * from hotels;

CREATE TABLE HOTEL_BOOKINGS (
    hb_id INT PRIMARY KEY,
    booking_id INT NOT NULL,
    hotel_id INT NOT NULL,
    check_in DATE NOT NULL,
    check_out DATE NOT NULL,
    rooms INT DEFAULT 1,
    total_cost DECIMAL(10,2),

    FOREIGN KEY (booking_id) REFERENCES BOOKINGS(booking_id),
    FOREIGN KEY (hotel_id) REFERENCES HOTELS(hotel_id)
);

INSERT INTO HOTEL_BOOKINGS (hb_id, booking_id, hotel_id, check_in, check_out, rooms, total_cost)
VALUES
(1, 1, 1, '2024-07-15', '2024-07-20', 1, 27500.00),
(2, 2, 1, '2024-08-05', '2024-08-12', 2, 77000.00),
(3, 3, 2, '2024-07-01', '2024-07-06', 1, 24000.00),
(4, 4, 2, '2024-11-10', '2024-11-17', 2, 67200.00),
(5, 5, 3, '2024-09-10', '2024-09-15', 1, 20000.00),

select * from bookings;
INSERT INTO BOOKINGS (booking_id, customer_id, dest_id, booking_date, travel_date, return_date, status, total_amount)
VALUES
(6, 1, 6, '2025-06-01', '2025-06-10', '2025-06-18', 'Confirmed', 24000.00),
(7, 2, 4, '2025-06-02', '2025-06-15', '2025-06-20', 'Confirmed', 18500.00),
(8, 3, 9, '2025-06-05', '2025-06-22', '2025-06-29', 'Confirmed', 29000.00),
(9, 1, 8, '2025-06-08', '2025-06-25', '2025-06-30', 'Confirmed', 20000.00);

-- 1st query List all customers who have made bookings in the last 30 days
SELECT c.customer_id, c.name, c.email, c.phone, b.booking_id, b.booking_date
FROM CUSTOMERS c
JOIN BOOKINGS b ON c.customer_id = b.customer_id
WHERE b.booking_date >= CURDATE() - INTERVAL 30 DAY;

-- 2nd query
SELECT d.city, d.country, COUNT(b.booking_id) AS total_bookings FROM DESTINATIONS d JOIN BOOKINGS b ON d.dest_id = b.dest_id 
GROUP BY d.city, d.country 
ORDER BY total_bookings DESC LIMIT 3;

-- 3rd query Calculate the total revenue generated from each destination 
SELECT 
    d.dest_id,
    d.city,
    d.country,
    SUM(b.total_amount) AS total_revenue
FROM 
    DESTINATIONS d
JOIN 
    BOOKINGS b ON d.dest_id = b.dest_id
GROUP BY 
    d.dest_id, d.city, d.country;
    
-- 4h query Display customers who have never made any booking 
SELECT 
    c.customer_id,
    c.name,
    c.email,
    c.phone
FROM 
    CUSTOMERS c
LEFT JOIN 
    BOOKINGS b ON c.customer_id = b.customer_id
WHERE 
    b.booking_id IS NULL;
    
-- Intermediate queries 
-- 1 query Find customers who have booked hotels with rating above 4.5 and spent more than 30000
SELECT c.customer_id,c.name,c.email,h.hotel_name,h.rating,hb.total_cost
FROM 
    CUSTOMERS c
JOIN 
    BOOKINGS b ON c.customer_id = b.customer_id
JOIN 
    HOTEL_BOOKINGS hb ON b.booking_id = hb.booking_id
JOIN 
    HOTELS h ON hb.hotel_id = h.hotel_id
WHERE 
    h.rating > 4.5
    AND hb.total_cost > 30000;

-- 2 Create a query to show monthly booking trends for the current year

SELECT 
    MONTH(booking_date) AS month_number,
    MONTHNAME(booking_date) AS month_name,
    COUNT(booking_id) AS total_bookings
FROM 
    BOOKINGS
WHERE 
    YEAR(booking_date) = YEAR(CURDATE())
GROUP BY 
    MONTH(booking_date), MONTHNAME(booking_date)
ORDER BY 
    month_number;

-- 3 List destinations where the average booking amount is above the overall average 

SELECT 
    d.dest_id,
    d.city,
    d.country,
    AVG(b.total_amount) AS avg_booking_amount
FROM 
    DESTINATIONS d
JOIN 
    BOOKINGS b ON d.dest_id = b.dest_id
GROUP BY 
    d.dest_id, d.city, d.country
HAVING 
    AVG(b.total_amount) > (SELECT AVG(total_amount) FROM BOOKINGS);

-- 4 Find customers who have visited the same destination more than once 
SELECT 
    b.customer_id,
    c.name,
    b.dest_id,
    d.city,
    d.country,
    COUNT(b.booking_id) AS visit_count
FROM 
    BOOKINGS b
JOIN 
    CUSTOMERS c ON b.customer_id = c.customer_id
JOIN 
    DESTINATIONS d ON b.dest_id = d.dest_id
GROUP BY 
    b.customer_id, b.dest_id
HAVING 
    COUNT(b.booking_id) > 1;
    
-- advanced 
-- 1 Create a stored procedure to calculate customer loyalty points based on total spending

DELIMITER $$

CREATE PROCEDURE CalculateLoyaltyPoints(IN input_customer_id INT)
BEGIN
    DECLARE total_spent DECIMAL(10,2);
    DECLARE loyalty_points INT DEFAULT 0;

    -- Step 1: Calculate total spending for the customer
    SELECT IFNULL(SUM(total_amount), 0)
    INTO total_spent
    FROM BOOKINGS
    WHERE customer_id = input_customer_id;

    -- Step 2: Assign loyalty points based on spending
    IF total_spent > 50000 THEN
        SET loyalty_points = 500;
    ELSEIF total_spent > 25000 THEN
        SET loyalty_points = 250;
    ELSEIF total_spent > 10000 THEN
        SET loyalty_points = 100;
    ELSE
        SET loyalty_points = 0;
    END IF;

    -- Step 3: Show result
    SELECT 
        input_customer_id AS customer_id, 
        total_spent AS total_spending, 
        loyalty_points AS loyalty_points;
END $$

DELIMITER ;


CALL CalculateLoyaltyPoints(1);

-- Write a trigger to automatically update the booking status when payment is completed 

DELIMITER $$

CREATE TRIGGER update_booking_status_after_payment
AFTER INSERT ON PAYMENTS
FOR EACH ROW
BEGIN
    IF NEW.status = 'Success' THEN
        UPDATE BOOKINGS
        SET status = 'Confirmed'
        WHERE booking_id = NEW.booking_id;
    END IF;
END $$

DELIMITER ;



-- BANKING DOMAIN DATABASE CREATION WITH PROPER FK REFERENCES
create database bankingdomain;
use bankingdomain;
-- 1. CUSTOMERS TABLE
CREATE TABLE CUSTOMERS (
    customer_id INT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone VARCHAR(20),
    address VARCHAR(255),
    date_of_birth DATE,
    account_opening_date DATE
);

-- 2. ACCOUNTS TABLE
CREATE TABLE ACCOUNTS (
    account_id INT PRIMARY KEY,
    customer_id INT,
    account_type VARCHAR(50),
    balance DECIMAL(12,2),
    status VARCHAR(50),
    created_date DATE,
    FOREIGN KEY (customer_id) REFERENCES CUSTOMERS(customer_id)
);

-- 3. TRANSACTIONS TABLE
CREATE TABLE TRANSACTIONS (
    transaction_id INT PRIMARY KEY,
    account_id INT,
    transaction_type VARCHAR(50),
    amount DECIMAL(12,2),
    transaction_date DATE,
    description VARCHAR(255),
    reference_account_id INT,
    FOREIGN KEY (account_id) REFERENCES ACCOUNTS(account_id),
    FOREIGN KEY (reference_account_id) REFERENCES ACCOUNTS(account_id)
);

-- 4. LOANS TABLE
CREATE TABLE LOANS (
    loan_id INT PRIMARY KEY,
    customer_id INT,
    loan_type VARCHAR(50),
    loan_amount DECIMAL(12,2),
    interest_rate DECIMAL(5,2),
    tenure_months INT,
    status VARCHAR(50),
    approval_date DATE,
    FOREIGN KEY (customer_id) REFERENCES CUSTOMERS(customer_id)
);

-- 5. LOAN_PAYMENTS TABLE
CREATE TABLE LOAN_PAYMENTS (
    payment_id INT PRIMARY KEY,
    loan_id INT,
    payment_date DATE,
    amount_paid DECIMAL(12,2),
    principal_amount DECIMAL(12,2),
    interest_amount DECIMAL(12,2),
    balance_remaining DECIMAL(12,2),
    FOREIGN KEY (loan_id) REFERENCES LOANS(loan_id)
);

-- 6. CREDIT_CARDS TABLE
CREATE TABLE CREDIT_CARDS (
    card_id INT PRIMARY KEY,
    customer_id INT,
    card_number VARCHAR(20) UNIQUE,
    card_type VARCHAR(50),
    credit_limit DECIMAL(12,2),
    outstanding_balance DECIMAL(12,2),
    issue_date DATE,
    expiry_date DATE,
    FOREIGN KEY (customer_id) REFERENCES CUSTOMERS(customer_id)
);

-- 7. ATM_TRANSACTIONS TABLE
CREATE TABLE ATM_TRANSACTIONS (
    atm_txn_id INT PRIMARY KEY,
    account_id INT,
    atm_id VARCHAR(50),
    transaction_type VARCHAR(50),
    amount DECIMAL(12,2),
    transaction_date DATE,
    location VARCHAR(100),
    FOREIGN KEY (account_id) REFERENCES ACCOUNTS(account_id)
);

-- INSERT DATA INTO TABLES

-- CUSTOMERS DATA
INSERT INTO CUSTOMERS VALUES (1, 'Ravi Kumar', 'ravi@example.com', '9876543210', 'Hyderabad', '1990-05-15', '2020-01-10');
INSERT INTO CUSTOMERS VALUES (2, 'Priya Sharma', 'priya@example.com', '9876501234', 'Delhi', '1988-03-22', '2021-06-05');
INSERT INTO CUSTOMERS VALUES (3, 'Arjun Reddy', 'arjun@example.com', '9988776655', 'Chennai', '1992-11-02', '2022-02-20');
INSERT INTO CUSTOMERS VALUES (4, 'Sneha Rao', 'sneha@example.com', '9123456789', 'Bangalore', '1995-09-12', '2023-07-15');
INSERT INTO CUSTOMERS VALUES (5, 'Vikas Patel', 'vikas@example.com', '9998887776', 'Mumbai', '1991-12-30', '2024-03-10');

-- ACCOUNTS DATA
INSERT INTO ACCOUNTS VALUES (101, 1, 'Savings', 50000.00, 'Active', '2020-01-15');
INSERT INTO ACCOUNTS VALUES (102, 2, 'Current', 150000.00, 'Active', '2021-06-10');
INSERT INTO ACCOUNTS VALUES (103, 3, 'Savings', 75000.00, 'Active', '2022-02-25');
INSERT INTO ACCOUNTS VALUES (104, 4, 'Savings', 20000.00, 'Active', '2023-07-20');
INSERT INTO ACCOUNTS VALUES (105, 5, 'Current', 100000.00, 'Active', '2024-03-15');

-- TRANSACTIONS DATA
INSERT INTO TRANSACTIONS VALUES (1001, 101, 'Deposit', 10000.00, '2024-06-01', 'Initial Deposit', NULL);
INSERT INTO TRANSACTIONS VALUES (1002, 102, 'Transfer', 5000.00, '2024-06-05', 'Sent to Ravi', 101);
INSERT INTO TRANSACTIONS VALUES (1003, 101, 'Receive', 5000.00, '2024-06-05', 'Received from Priya', 102);
INSERT INTO TRANSACTIONS VALUES (1004, 103, 'Deposit', 20000.00, '2024-06-10', 'Salary Deposit', NULL);
INSERT INTO TRANSACTIONS VALUES (1005, 104, 'Withdrawal', 5000.00, '2024-06-12', 'ATM Withdrawal', NULL);

-- LOANS DATA
INSERT INTO LOANS VALUES (201, 1, 'Home Loan', 2000000.00, 7.5, 240, 'Approved', '2023-05-20');
INSERT INTO LOANS VALUES (202, 2, 'Car Loan', 500000.00, 8.0, 60, 'Approved', '2023-07-01');
INSERT INTO LOANS VALUES (203, 3, 'Personal Loan', 300000.00, 12.5, 36, 'Approved', '2024-01-10');
INSERT INTO LOANS VALUES (204, 4, 'Education Loan', 400000.00, 9.0, 48, 'Approved', '2024-02-15');
INSERT INTO LOANS VALUES (205, 5, 'Business Loan', 1000000.00, 10.0, 120, 'Approved', '2024-03-25');

-- LOAN_PAYMENTS DATA
INSERT INTO LOAN_PAYMENTS VALUES (301, 201, '2024-01-15', 20000.00, 15000.00, 5000.00, 1985000.00);
INSERT INTO LOAN_PAYMENTS VALUES (302, 201, '2024-02-15', 20000.00, 15000.00, 5000.00, 1970000.00);
INSERT INTO LOAN_PAYMENTS VALUES (303, 202, '2024-04-10', 10000.00, 8000.00, 2000.00, 490000.00);
INSERT INTO LOAN_PAYMENTS VALUES (304, 203, '2024-05-05', 15000.00, 10000.00, 5000.00, 290000.00);
INSERT INTO LOAN_PAYMENTS VALUES (305, 204, '2024-06-15', 12000.00, 9000.00, 3000.00, 391000.00);

-- CREDIT_CARDS DATA
INSERT INTO CREDIT_CARDS VALUES (401, 1, '4111222233334444', 'Platinum', 200000.00, 5000.00, '2022-03-10', '2027-03-10');
INSERT INTO CREDIT_CARDS VALUES (402, 2, '5555666677778888', 'Gold', 100000.00, 2000.00, '2023-08-01', '2028-08-01');
INSERT INTO CREDIT_CARDS VALUES (403, 3, '4444555566667777', 'Silver', 50000.00, 1000.00, '2024-01-15', '2029-01-15');
INSERT INTO CREDIT_CARDS VALUES (404, 4, '3333444455556666', 'Platinum', 150000.00, 2500.00, '2024-03-10', '2029-03-10');
INSERT INTO CREDIT_CARDS VALUES (405, 5, '2222333344445555', 'Gold', 120000.00, 3000.00, '2024-04-20', '2029-04-20');

-- ATM_TRANSACTIONS DATA
INSERT INTO ATM_TRANSACTIONS VALUES (501, 101, 'ATM-001', 'Withdrawal', 2000.00, '2024-06-10', 'Hyderabad');
INSERT INTO ATM_TRANSACTIONS VALUES (502, 102, 'ATM-002', 'Deposit', 5000.00, '2024-06-12', 'Delhi');
INSERT INTO ATM_TRANSACTIONS VALUES (503, 103, 'ATM-003', 'Withdrawal', 3000.00, '2024-06-15', 'Chennai');
INSERT INTO ATM_TRANSACTIONS VALUES (504, 104, 'ATM-004', 'Withdrawal', 1000.00, '2024-06-18', 'Bangalore');
INSERT INTO ATM_TRANSACTIONS VALUES (505, 105, 'ATM-005', 'Deposit', 7000.00, '2024-06-20', 'Mumbai');

-- 1. List all active accounts with their current balances
SELECT 
    account_id, 
    customer_id, 
    account_type, 
    balance 
FROM 
    ACCOUNTS 
WHERE 
    status = 'Active';

-- 2. Find customers who have multiple account types
SELECT 
    c.customer_id, 
    c.name, 
    COUNT(DISTINCT a.account_type) AS account_type_count
FROM 
    CUSTOMERS c
JOIN 
    ACCOUNTS a ON c.customer_id = a.customer_id
GROUP BY 
    c.customer_id, c.name
HAVING 
    COUNT(DISTINCT a.account_type) > 1;

-- 3. Calculate total deposits and withdrawals for each account in the last month
SELECT 
    account_id, 
    SUM(CASE WHEN transaction_type = 'Deposit' THEN amount ELSE 0 END) AS total_deposits,
    SUM(CASE WHEN transaction_type = 'Withdrawal' THEN amount ELSE 0 END) AS total_withdrawals
FROM 
    TRANSACTIONS
WHERE 
    transaction_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)
GROUP BY 
    account_id;

-- 4. Display customers with overdue loan payments (assuming overdue = balance_remaining > 0)
SELECT 
    c.customer_id, 
    c.name, 
    l.loan_id, 
    lp.payment_date, 
    lp.balance_remaining
FROM 
    CUSTOMERS c
JOIN 
    LOANS l ON c.customer_id = l.customer_id
JOIN 
    LOAN_PAYMENTS lp ON l.loan_id = lp.loan_id
WHERE 
    lp.balance_remaining > 0;

-- 5. Identify potentially fraudulent transactions: multiple high-value transactions within short time (10 minutes)
SELECT 
    t1.account_id, 
    t1.transaction_id, 
    t1.amount, 
    t1.transaction_date, 
    t2.transaction_id AS other_transaction_id, 
    t2.amount AS other_amount, 
    t2.transaction_date AS other_transaction_date
FROM 
    TRANSACTIONS t1
JOIN 
    TRANSACTIONS t2 ON t1.account_id = t2.account_id AND t1.transaction_id <> t2.transaction_id
WHERE 
    t1.amount >= 10000 AND 
    t2.amount >= 10000 AND 
    ABS(TIMESTAMPDIFF(MINUTE, t1.transaction_date, t2.transaction_date)) <= 10
ORDER BY 
    t1.account_id, t1.transaction_date;

-- 6. Generate monthly statement for specific account (replace :accountId with actual account id)
SELECT 
    transaction_id, 
    account_id, 
    transaction_type, 
    amount, 
    transaction_date, 
    description
FROM 
    TRANSACTIONS
WHERE 
    account_id = :accountId AND 
    MONTH(transaction_date) = MONTH(CURDATE()) AND 
    YEAR(transaction_date) = YEAR(CURDATE())
ORDER BY 
    transaction_date;

-- 7. Find customers eligible for loan pre-approval based on balance > 100000 and total deposits > 50000 in last 6 months
SELECT 
    c.customer_id, 
    c.name, 
    a.account_id, 
    a.balance, 
    SUM(t.amount) AS total_recent_deposits
FROM 
    CUSTOMERS c
JOIN 
    ACCOUNTS a ON c.customer_id = a.customer_id
JOIN 
    TRANSACTIONS t ON a.account_id = t.account_id
WHERE 
    a.balance >= 100000 AND 
    t.transaction_type = 'Deposit' AND 
    t.transaction_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)
GROUP BY 
    c.customer_id, c.name, a.account_id, a.balance
HAVING 
    total_recent_deposits >= 50000;

-- 8. Calculate bank's total exposure to each loan type
SELECT 
    loan_type, 
    SUM(loan_amount) AS total_exposure
FROM 
    LOANS
GROUP BY 
    loan_type;
    

-- 9. Create a view showing customer profitability (total deposits - total withdrawals + loan interest earned)
CREATE VIEW CUSTOMER_PROFITABILITY AS
SELECT 
    c.customer_id, 
    c.name,
    COALESCE(SUM(CASE WHEN t.transaction_type = 'Deposit' THEN t.amount ELSE 0 END),0) - 
    COALESCE(SUM(CASE WHEN t.transaction_type = 'Withdrawal' THEN t.amount ELSE 0 END),0) + 
    COALESCE(SUM(l.loan_amount * l.interest_rate / 100), 0) AS profitability
FROM 
    CUSTOMERS c
LEFT JOIN 
    ACCOUNTS a ON c.customer_id = a.customer_id
LEFT JOIN 
    TRANSACTIONS t ON a.account_id = t.account_id
LEFT JOIN 
    LOANS l ON c.customer_id = l.customer_id
GROUP BY 
    c.customer_id, c.name;

-- 10. Identify inactive accounts with no transactions in last 90 days
SELECT 
    a.account_id, 
    a.customer_id, 
    a.account_type, 
    a.balance
FROM 
    ACCOUNTS a
LEFT JOIN 
    TRANSACTIONS t ON a.account_id = t.account_id AND t.transaction_date >= DATE_SUB(CURDATE(), INTERVAL 90 DAY)
WHERE 
    t.transaction_id IS NULL;
------------------------------------------------------------

